import os
import numpy as np
from mdt_reco import ConfigParser, Chamber, Generator, Signal


def test_encoder():
    """
    Test the encoder-decoder pipeline. This takes an event
    generated by the Generator class according to the
    specifications in ci_config.yaml, runs it through
    the encoder, then through the decoder. The event
    before and after the encoding process is compared.
    """

    # generate event using info from config file
    cp = ConfigParser("configs/ci_config.yaml")
    gen = Generator(cp)
    sim_evt = gen.simEvent()
    A, C = gen.findTrajectory(0, sim_evt)
    evt_pre_enc = gen.createEvent(A, C)

    # encode event
    sig = Signal(cp)
    sig.encodeEvents([evt_pre_enc], "dummy.bin")#, 0)

    # decode event
    evt_post_dec = sig.decodeEvents("dummy.bin")[0]
    evt_post_dec = {k: np.array(v) for k, v in evt_post_dec.items()}
    os.remove("dummy.bin")

    # make sure we achieve identical results to a certain tolerance
    # tolerance allows for float misrepresentation due to binary
    # compression
    tol = 0.01
    if evt_pre_enc.keys() != evt_post_dec.keys():
        assert False
    for key in evt_pre_enc.keys():
        if (evt_pre_enc[key] != evt_post_dec[key]).all():
            diff = (evt_post_dec[key] - evt_pre_enc[key]) / evt_pre_enc[key]
            outside_tol = diff > tol
            if np.sum(outside_tol) > 0:
                assert False
    assert True
